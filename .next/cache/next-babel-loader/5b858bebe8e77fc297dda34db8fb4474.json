{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"D:\\\\next-react-shopping\\\\components\\\\ProductList.tsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Product from \"./Product\";\n\nvar ProductList = function ProductList(props) {\n  return __jsx(\"div\", {\n    className: \"product-list\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 5\n    }\n  }, props.products.map(function (product, index) {\n    return __jsx(Product, {\n      product: product,\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 9\n      }\n    });\n  }));\n};\n\n_c2 = ProductList;\n_c = ProductList;\nexport default ProductList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductList\");\n;\n\nvar _a, _b; // Legacy CSS implementations will `eval` browser code in a Node.js context\n// to extract CSS. For backwards compatibility, we need to check we're in a\n// browser context before continuing.\n\n\nif (typeof self !== 'undefined' && // AMP / No-JS mode does not inject these helpers:\n'$RefreshHelpers$' in self) {\n  var currentExports = module.__proto__.exports;\n  var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null; // This cannot happen in MainTemplate because the exports mismatch between\n  // templating and execution.\n\n  self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id); // A module can be accepted automatically based on its exports, e.g. when\n  // it is a Refresh Boundary.\n\n  if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n    // Save the previous exports on update so we can compare the boundary\n    // signatures.\n    module.hot.dispose(function (data) {\n      data.prevExports = currentExports;\n    }); // Unconditionally accept an update to this module, we'll check if it's\n    // still a Refresh Boundary later.\n\n    module.hot.accept(); // This field is set when the previous version of this module was a\n    // Refresh Boundary, letting us know we need to check for invalidation or\n    // enqueue an update.\n\n    if (prevExports !== null) {\n      // A boundary can become ineligible if its exports are incompatible\n      // with the previous exports.\n      //\n      // For example, if you add/remove/change exports, we'll want to\n      // re-execute the importing modules, and force those components to\n      // re-render. Similarly, if you convert a class component to a\n      // function, we want to invalidate the boundary.\n      if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n        module.hot.invalidate();\n      } else {\n        self.$RefreshHelpers$.scheduleUpdate();\n      }\n    }\n  } else {\n    // Since we just executed the code for the module, it's possible that the\n    // new exports made it ineligible for being a boundary.\n    // We only care about the case when we were _previously_ a boundary,\n    // because we already accepted this update (accidental side effect).\n    var isNoLongerABoundary = prevExports !== null;\n\n    if (isNoLongerABoundary) {\n      module.hot.invalidate();\n    }\n  }\n}\n\nvar _c2;\n\n$RefreshReg$(_c2, \"ProductList\");","map":{"version":3,"sources":["D:/next-react-shopping/components/ProductList.tsx"],"names":["ProductList"],"mappings":";;;;;AAAA,OAAA,OAAA,MAAA,WAAA;;AAIA,IAAMA,WAAW,GAAG,SAAdA,WAAc,CAAA,KAAA,EAA8B;AAChD,SACE,KAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAd,cAAA;AAAA,IAAA,MAAA,EAAA,KAAA;AAAA,IAAA,QAAA,EAAA;AAAA,MAAA,QAAA,EAAA,YAAA;AAAA,MAAA,UAAA,EAAA,CAAA;AAAA,MAAA,YAAA,EAAA;AAAA;AAAA,GAAA,EACG,KAAK,CAAL,QAAA,CAAA,GAAA,CAAmB,UAAA,OAAA,EAAA,KAAA,EAAA;AAAA,WAClB,KAAA,CAAA,OAAA,EAAA;AAAS,MAAA,OAAO,EAAhB,OAAA;AAA2B,MAAA,GAAG,EAA9B,KAAA;AAAA,MAAA,MAAA,EAAA,KAAA;AAAA,MAAA,QAAA,EAAA;AAAA,QAAA,QAAA,EAAA,YAAA;AAAA,QAAA,UAAA,EAAA,CAAA;AAAA,QAAA,YAAA,EAAA;AAAA;AAAA,KAAA,CADkB;AAFxB,GAEK,CADH,CADF;AADF,CAAA;;MAAMA,W;KAAAA,W;AASN,eAAA,WAAA","sourcesContent":["import Product, { IProduct } from \"./Product\";\r\ninterface IProductListProps {\r\n  products: IProduct[];\r\n}\r\nconst ProductList = (props: IProductListProps) => {\r\n  return (\r\n    <div className=\"product-list\">\r\n      {props.products.map((product, index) => (\r\n        <Product product={product} key={index} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\nexport default ProductList;\r\n"]},"metadata":{},"sourceType":"module"}